
struct Lexbuf {
   content : Bytes
   mut pos : Int
 }

pub fn Lexbuf::from_bytes(bytes : Bytes) -> Lexbuf {
   { content: bytes, pos: 0 }
 }

// NOTE: MoonBit do have unboxed Option[Byte] optimization
fn next(self : Lexbuf) -> Byte? {
   if self.pos < self.content.length() {
     let b = self.content[self.pos]
     self.pos += 1
     Some(b)
   } else {
     None
   }
 }

fn subbytes(self : Lexbuf, head : Int, tail : Int) -> Bytes {
   let bytes = Bytes::new(tail - head)
   for p = head; p < tail; p = p + 1 {
     bytes[p - head] = self.content[p]
   }
   bytes
 }

pub struct Engine {
   graph : Array[Array[(Int, Array[Array[Int]])]]
   end_nodes : Array[(Int, Array[((Int, Int), (Int, Int))])?]
   start_tags : Array[Int]
   code_blocks_n : Int
 }

pub fn run(self : Engine, lexbuf : Lexbuf) -> (Int, Array[Bytes]) {
   let mut state = 1
   let mut tagState : Array[Array[Int]] = []
   let backtrace = Array::make(self.code_blocks_n, None)
   for tag in self.start_tags {
     while tagState.length() <= tag {
       tagState.push([])
     }
     tagState[tag].push(lexbuf.pos)
   }
   while state != 0 {
     match self.end_nodes[state] {
       Some(t) => backtrace[t.0] = Some((lexbuf.pos, state, tagState))
       _ => ()
     }
     guard let Some(b) = lexbuf.next() else { None => break }
     let next = self.graph[state][b.to_int()]
     state = next.0
     let new_tagState : Array[Array[Int]] = []
     for i = 0; i < next.1.length(); i = i + 1 {
       new_tagState.push([])
       for j = 0; j < next.1[i].length(); j = j + 1 {
         let t = next.1[i][j]
         if t == -1 {
           new_tagState[i].push(lexbuf.pos)
         } else {
           new_tagState[i].push(tagState[i][t])
         }
       }
     }
     tagState = new_tagState
   }
   for index, b in backtrace {
     match b {
       Some((p, state, tagState)) => {
         lexbuf.pos = p
         let captures = self.end_nodes[state].unwrap().1.map(
           fn {
             ((b_t, b_r), (e_t, e_r)) =>
               lexbuf.subbytes(tagState[b_t][b_r], tagState[e_t][e_r])
           },
         )
         break (index, captures)
       }
       None => ()
     }
   } else {
     (self.code_blocks_n, [])
   }
 }



// translate from https://ohama.github.io/ocaml/ocamllex-tutorial/examples/wordcount/


let __mbtlex_engine_count: Engine = { graph: [[(0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, [])], [(2, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (5, [[], []]), (4, [[], []]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (5, [[], []]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]])], [(2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (0, []), (0, []), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (0, []), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]])], [(2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (0, []), (0, []), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (0, []), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]])], [(0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, [])], [(0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, [])]], end_nodes: [None, Some((3, [])), Some((1, [((0, 0), (1, 0))])), Some((1, [((0, 0), (1, 0))])), Some((0, [])), Some((2, []))], start_tags: [0], code_blocks_n: 4 }
fn count( lines :  Int, words :  Int, chars :  Int, lexbuf : Lexbuf ) ->  (Int, Int, Int)  {
 match __mbtlex_engine_count.run(lexbuf) {
 (0, __mbtlex_captures) => {
  count(lines + 1, words, chars + 1, lexbuf) 
 }
 (1, __mbtlex_captures) => {
 let word: Bytes = __mbtlex_captures[0]
 
      let new_chars = chars + word.length()
      count(lines, words + 1, new_chars, lexbuf)
    
 }
 (2, __mbtlex_captures) => {
  count(lines, words, chars + 1, lexbuf) 
 }
 (3, __mbtlex_captures) => {
  (lines, words, chars) 
 }
 _ => abort("lex: fail to match")
 }
 }


test {
    let str = b"Hi\nWelcome to MoonbitLex\n"
    let lexbuf = Lexbuf::from_bytes(str)
    inspect!(count(0, 0, 0, lexbuf), content="(2, 4, 25)")
  }
